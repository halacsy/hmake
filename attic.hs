generates::File->Rule->Bool
generates f (Rule cmd ins out) = out == f

flatten :: [[a]] -> [a]
flatten l = foldl (++) [] l

direct_generator_files g f =
	case filter (generates f) g of
		[] -> []
		[(Rule _ inputs _)] -> inputs
		_ -> error (f ++ " is generated by >1 rules")

generator_files::G -> File -> [File]
generator_files g f =
	d ++ (flatten $ map (generator_files g) $ d) where
		d = direct_generator_files g f




		create_template::String->(Params->String)
string_template s = 
    -- this is a temporal solution, we just check the end of the string
    case splitOn "$" s of
        [] -> error "empty string"
        [s] -> const s
        n:p:[] -> \params -> n++(get_value params p)

params = [(Param "date" (SValue "2012"))]


a = File {name ="a", pnames=["date"], anchored_parameters=[]}
b = File {name ="b", pnames=["date"], anchored_parameters=[]}
b1 = File {name ="b", pnames=["date"], anchored_parameters=[("date", "1")]}
b2 = File {name ="b", pnames=["date"], anchored_parameters=[("date", "2")]}

c = File {name ="c", pnames=[], anchored_parameters=[]}
d = File {name ="d", pnames=[], anchored_parameters=[]}
e = File {name ="e", pnames=[], anchored_parameters=[]}

r1 = Rule {cmd="sort", inputs=[a], output=b}
r2 = Rule {cmd="sort", inputs=[c], output=d}
r3 = Rule {cmd="paste", inputs=[b1, b2, d], output=e}

p = File {name="vacak", pnames=["date"], anchored_parameters=[]}
target = e

rules = [r1, r2, r3]
main = do
	print (get_anchored (anchored_parameters b1) ["date"])
	print r3
	print (execution $ select $ rules_to_tree rules target)